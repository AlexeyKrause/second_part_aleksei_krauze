package com.akrauze.buscompany.service;import com.akrauze.buscompany.daoimpl.BusDaoImpl;import com.akrauze.buscompany.daoimpl.DateTripDaoImpl;import com.akrauze.buscompany.daoimpl.TripDaoImpl;import com.akrauze.buscompany.dtorequest.AddTripDtoRequest;import com.akrauze.buscompany.dtoresponse.TripDtoResponse;import com.akrauze.buscompany.dtoresponse.TripScheduleDtoResponse;import com.akrauze.buscompany.exception.ServerException;import com.akrauze.buscompany.mappers.TripMapper;import com.akrauze.buscompany.model.Trip;import com.akrauze.buscompany.service.datesperiod.ScheduleToDatesConverter;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import javax.servlet.http.HttpServletRequest;import java.time.LocalDate;import java.util.ArrayList;import java.util.Arrays;import java.util.List;@Service@RequiredArgsConstructorpublic class TripService {    private final DateTripDaoImpl dateTripDao;    private final TripDaoImpl tripDao;    private final BusDaoImpl busDao;    private final TripMapper tripMapper;    private final ValidateService validateService;    private final List<ScheduleToDatesConverter> datesConverters;    public TripDtoResponse postTrip(AddTripDtoRequest dtoRequest,                                    HttpServletRequest httpServletRequest) throws ServerException {        validateService.checkUserRole(httpServletRequest, "ADMIN");        if (someNormalNameForFunctionWithCorrectMeaning(dtoRequest)) {            return null;        }        var trip = tripMapper.mapToTrip(dtoRequest);        trip.setBusId(busDao.getByName(dtoRequest.getBusName()).getId());        tripDao.insert(trip);        dateTripDao.insert(getDatesByPeriod(trip), trip.getId());        return new TripScheduleDtoResponse();    }    private boolean someNormalNameForFunctionWithCorrectMeaning(AddTripDtoRequest dtoRequest) {        return !(dtoRequest.getDates() == null && dtoRequest.getSchedule() != null);    }    private List<String> getDatesByPeriod(Trip trip) {        List<String> period = Arrays.asList(trip.getSchedule().getPeriod().split(","));        List<String> dates = new ArrayList<>();        var datesRange = LocalDate.parse(trip.getSchedule().getFromDate()).datesUntil(LocalDate.parse(trip.getSchedule().getToDate()));        datesConverters.stream()            .filter(converter -> converter.canHandleThisPeriod(period.get(0)))            .forEach(converter -> dates.addAll(converter.convert(datesRange, period)));        return dates;    }}